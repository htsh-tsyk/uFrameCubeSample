// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.MVVM;
using uFrame.MVVM.Services;
using uFrame.MVVM.Bindings;
using uFrame.Serialization;
using UniRx;
using UnityEngine;


public class GameViewBase : uFrame.MVVM.ViewBase {
    
    [UFToggleGroup("Cubes")]
    [UnityEngine.HideInInspector()]
    public bool _BindCubes = true;
    
    [UFGroup("Cubes")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Cubesparent")]
    protected UnityEngine.Transform _CubesParent;
    
    [UFGroup("Cubes")]
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    [UnityEngine.Serialization.FormerlySerializedAsAttribute("_CubesviewFirst")]
    protected bool _CubesViewFirst;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameViewModel);
        }
    }
    
    public GameViewModel Game {
        get {
            return (GameViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as GameViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Game to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
        if (_BindCubes) {
            this.BindToViewCollection(this.Game.Cubes, this.CubesCreateView, this.CubesAdded, this.CubesRemoved, _CubesParent, _CubesViewFirst);
        }
    }
    
    public virtual uFrame.MVVM.ViewBase CubesCreateView(uFrame.MVVM.ViewModel viewModel) {
        return InstantiateView(viewModel);
    }
    
    public virtual void CubesAdded(uFrame.MVVM.ViewBase view) {
    }
    
    public virtual void CubesRemoved(uFrame.MVVM.ViewBase view) {
    }
    
    public virtual void ExecuteAddCube() {
        Game.AddCube.OnNext(new AddCubeCommand() { Sender = Game });
    }
    
    public virtual void ExecuteAddCube(AddCubeCommand command) {
        command.Sender = Game;
        Game.AddCube.OnNext(command);
    }
}

public class CubeViewBase : uFrame.MVVM.ViewBase {
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(CubeViewModel);
        }
    }
    
    public CubeViewModel Cube {
        get {
            return (CubeViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as CubeViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Cube to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
}
